customers_ordered
# get rid of duplicates and combine in one string
customers_ordered <- unique(customers_ordered)
customers_ordered <- paste(customers_ordered, collapse = ',')
#customers_ordered <- toJSON(as.list(customers_ordered))
customers_ordered
endpoint <- "rest/V1/customers/search/"
myquery <- list("searchCriteria[filter_groups][0][filters][0][field]"="email",
"searchCriteria[filter_groups][0][filters][0][value]"=customers_ordered,
"searchCriteria[filter_groups][0][filters][0][condition_type]"="nin")
cust_no <- getm2objects(urlbase = urlbase, endpoint = endpoint, query = myquery, auth=auth)
View(cust_no)
for (i in 1:length(orders[["items"]])){
emails[i] <- orders[["items"]][[i]][["customer_email"]]
}
emails <- character()
for (i in 1:length(orders[["items"]])){
emails[i] <- orders[["items"]][[i]][["customer_email"]]
}
emails
emails <- character()
cust_no[["items"]][[1]][["customer_email"]]
cust_no[["items"]][[2]][["customer_email"]]
cust_no[["items"]][[1]][["email"]]
emails <- character()
for (i in 1:length(cust_no[["items"]])){
emails[i] <- cust_no[["items"]][[i]][["email"]]
}
for (i in 1:length(cust_no[["items"]])){
emails[i] <- cust_no[["items"]][[i]][["email"]]
}
cust_no[["items"]][[1]][["email"]]
cust_no[["items"]][[55]][["email"]]
cust_no[["items"]][[56]][["email"]]
length(cust_no[["items"]])
emails <- character()
for (i in 1:length(cust_no[["items"]])) {
emails[i] <- cust_no[["items"]][[i]][["email"]]
}
emails
unique(emails)
union(emails, customers_ordered)
intersect(emails, customers_ordered)
# initialize empty factor and add there ids of customers who placed orders
customers_ordered <- character()
for (i in 1:length(orders[["items"]])){
customers_ordered[i] <- orders[["items"]][[i]][["customer_email"]]
}
# inspect values
customers_ordered
# get rid of duplicates and combine in one string
customers_ordered <- unique(customers_ordered)
customers_ordered_req <- paste(customers_ordered, collapse = ',')
customers_ordered
# get rid of duplicates and combine in one string
customers_ordered <- unique(customers_ordered)
for (i in 1:length(orders[["items"]])){
customers_ordered[i] <- orders[["items"]][[i]][["customer_email"]]
}
# inspect values
customers_ordered
# get rid of duplicates and combine in one string
customers_ordered <- unique(customers_ordered)
customers_ordered
customers_ordered_req <- paste(customers_ordered, collapse = ',')
myquery <- list("searchCriteria[filter_groups][0][filters][0][field]"="email",
"searchCriteria[filter_groups][0][filters][0][value]"=customers_ordered_req,
"searchCriteria[filter_groups][0][filters][0][condition_type]"="nin")
cust_no <- getm2objects(urlbase = urlbase, endpoint = endpoint, query = myquery, auth=auth)
emails <- character()
for (i in 1:length(cust_no[["items"]])) {
emails[i] <- cust_no[["items"]][[i]][["email"]]
}
emails
intersect(emails, customers_ordered)
customers_ordered
emails
lenght(customers_ordered)
length(customers_ordered)
length(emails)
View(orders)
orders[["items"]][[1]][["customer_is_guest"]]
for (i in 1:length(orders[["items"]])){
customers_ordered[i] <- orders[["items"]][[i]][["customer_email"]]
if (orders[["items"]][[i]][["customer_is_guest"]]) guest_orders <- guest_orders+1
}
guest_orders
guest_orders <-0
# initialize empty factor and add there ids of customers who placed orders
customers_ordered <- character()
for (i in 1:length(orders[["items"]])){
customers_ordered[i] <- orders[["items"]][[i]][["customer_email"]]
if (orders[["items"]][[i]][["customer_is_guest"]]) guest_orders <- guest_orders+1
}
# initialize empty factor and add there ids of customers who placed orders
customers_ordered <- character()
guest_orders <-0
for (i in 1:length(orders[["items"]])){
customers_ordered[i] <- orders[["items"]][[i]][["customer_email"]]
if (orders[["items"]][[i]][["customer_is_guest"]]>0) guest_orders <- guest_orders+1
}
# initialize empty factor and add there ids of customers who placed orders
customers_ordered <- character()
for (i in 1:length(orders[["items"]])){
customers_ordered[i] <- orders[["items"]][[i]][["customer_email"]]
}
# inspect values
customers_ordered
# get rid of duplicates and combine in one string
customers_ordered <- unique(customers_ordered)
# form to query
customers_ordered_req <- paste(customers_ordered, collapse = ',')
customers_ordered
endpoint <- "rest/V1/customers/search/"
myquery <- list("searchCriteria[filter_groups][0][filters][0][field]"="email",
"searchCriteria[filter_groups][0][filters][0][value]"=customers_ordered_req,
"searchCriteria[filter_groups][0][filters][0][condition_type]"="nin")
cust_no <- getm2objects(urlbase = urlbase, endpoint = endpoint, query = myquery, auth=auth)
# extract emails
emails <- character()
for (i in 1:length(cust_no[["items"]])) {
emails[i] <- cust_no[["items"]][[i]][["email"]]
}
emails
order(emails)
emails
sort(emails)
sort(customers_ordered)
# extract emails to dataframe and cave to csv
emails <- data.frame()
cust_no[["items"]][[1]][["firstname"]]
cust_no[["items"]][[1]][["lastname"]]
# extract emails to dataframe and cave to csv
email_list <- data.frame()
for (i in 1:length(cust_no[["items"]])) {
emails_list$email[i] <- cust_no[["items"]][[i]][["email"]]
email_list$fname[i] <-  cust_no[["items"]][[i]][["firstname"]]
email_list$lnane[i] <- cust_no[["items"]][[i]][["lastname"]]
}
# extract emails to dataframe and cave to csv
email_list <- data.frame()
# extract emails to dataframe and cave to csv
emails_list <- data.frame()
for (i in 1:length(cust_no[["items"]])) {
emails_list$email[i] <- cust_no[["items"]][[i]][["email"]]
emails_list$fname[i] <-  cust_no[["items"]][[i]][["firstname"]]
emails_list$lnane[i] <- cust_no[["items"]][[i]][["lastname"]]
}
# extract emails to dataframe and cave to csv
emails_list <- data.frame()
colnames(emails_list) <- c("email", "fname", "lname")
emails_list
colnames(emails_list)
# extract emails to dataframe and cave to csv
emails_list <- data.frame(email=character(), fname=character(), lname==character())
# extract emails to dataframe and cave to csv
emails_list <- data.frame(email=character(), fname=character(), lname=character())
colnames(emails_list)
for (i in 1:length(cust_no[["items"]])) {
emails_list$email[i] <- cust_no[["items"]][[i]][["email"]]
emails_list$fname[i] <-  cust_no[["items"]][[i]][["firstname"]]
emails_list$lname[i] <- cust_no[["items"]][[i]][["lastname"]]
}
# extract emails to dataframe and cave to csv
emails_list <- data.frame(email=character(), fname=character(), lname=character())
for (i in 1:length(cust_no[["items"]])) {
email_list <-rbind(email_list)
emails_list$email[i] <- cust_no[["items"]][[i]][["email"]]
emails_list$fname[i] <-  cust_no[["items"]][[i]][["firstname"]]
emails_list$lname[i] <- cust_no[["items"]][[i]][["lastname"]]
}
class(cust_no[["items"]][[1]][["email"]])
email_list$email[1] <- cust_no[["items"]][[i]][["email"]]
email_list <- rbind(email_list, c("","",""))
email_list
# extract emails to dataframe and cave to csv
emails_list <- data.frame(email=character(), fname=character(), lname=character())
for (i in 1:length(cust_no[["items"]])) {
email_list <- rbind(email_list, c("","",""))
emails_list$email[i] <- cust_no[["items"]][[i]][["email"]]
emails_list$fname[i] <-  cust_no[["items"]][[i]][["firstname"]]
emails_list$lname[i] <- cust_no[["items"]][[i]][["lastname"]]
}
email_list$email[1] <- cust_no[["items"]][[i]][["email"]]
email_list$email[1]
email_list$email[2]
email_list$email[3]
email_list$email[4]
for (i in 1:length(cust_no[["items"]])) {
email_list <- rbind(email_list, c(cust_no[["items"]][[i]][["email"]],cust_no[["items"]][[i]][["firstname"]],
cust_no[["items"]][[i]][["lastname"]]))
}
# extract emails to dataframe and cave to csv
emails_list <- data.frame(email=character(), fname=character(), lname=character())[1:length(cust_no[["items"]])]
# extract emails to dataframe and cave to csv
emails_list <- data.frame()[1:length(cust_no[["items"]])]
# extract emails to dataframe and cave to csv
emails_list <- data.frame()[1:length(cust_no[["items"]]),]
for (i in 1:length(cust_no[["items"]])) {
emails_list$email[i] <- cust_no[["items"]][[i]][["email"]]
emails_list$fname[i] <-  cust_no[["items"]][[i]][["firstname"]]
emails_list$lname[i] <- cust_no[["items"]][[i]][["lastname"]]
}
emails_list
row.names(emails_list) <-1:nrow(emails_list)
emails_list
csv.write(emails_list, file="email-list.csv"
csv.write(emails_list, file="email-list.csv")
csv.write(emails_list, file="email-list.csv")
write.csv(emails_list, file="email-list.csv")
#row.names(emails_list) <-1:nrow(emails_list)
row.names(emails_list) <-NULL
write.csv(emails_list, file="email-list.csv")
emails_list
write.csv(emails_list, file="email-list.csv", row.names = FALSE)
###################################################################
#' OAuth Linkedin
#'
#' This function authenticates and creates a token for LinkedIN's API REST
#'
#' @param app_name Character. Your App's given name
#' @param client_id Character. Client ID
#' @param client_secret Character. Client secret
#' @export
li_auth <- function(app_name = NA, client_id = NA, client_secret = NA){
# Idea from https://github.com/mpiccirilli/Rlinkedin/blob/master/R/getProfile.R
if (is.na(app_name) & is.na(client_id) & is.na(client_secret)) {
app_name <- "LaresApp"
client_id <- "78a384k5n1otml"
client_secret <- "NDKzgFgurKt1M0Ab"
}
linkedin <- httr::oauth_endpoint(
"requestToken", "authorize", "accessToken", base_url = "https://api.linkedin.com/uas/oauth")
myapp <- httr::oauth_app(appname = app_name, client_id, client_secret)
token <- httr::oauth1.0_token(linkedin, myapp)
return(token)
}
####################################################################
#' Get My Personal LinkedIn Data
#'
#' This function brings a list with my personal Linkedin data
#'
#' @param token Object. li_auth() output
#' @export
li_profile <- function(token = NA) {
if (is.na(token)) {
token <- li_auth()
}
base_url <- "https://api.linkedin.com/v1/people/"
profile_fields <- ":(id,first-name,email-address,last-name,headline,picture-url,industry,summary,specialties,positions:(id,title,summary,start-date,end-date,is-current,company:(id,name,type,size,industry,ticker)),educations:(id,school-name,field-of-study,start-date,end-date,degree,activities,notes),associations,interests,num-recommenders,date-of-birth,publications:(id,title,publisher:(name),authors:(id,name),date,url,summary),patents:(id,title,summary,number,status:(id,name),office:(name),inventors:(id,name),date,url),languages:(id,language:(name),proficiency:(level,name)),skills:(id,skill:(name)),certifications:(id,name,authority:(name),number,start-date,end-date),courses:(id,name,number),recommendations-received:(id,recommendation-type,recommendation-text,recommender),honors-awards,three-current-positions,three-past-positions,volunteer)"
url <- paste0(base_url, "~",profile_fields,"?format=json")
get <- GET(url, config = token)
char <- rawToChar(get$content)
json <- jsonlite::fromJSON(char)
return(json)
}
###################################################################
#' OAuth Linkedin
#'
#' This function authenticates and creates a token for LinkedIN's API REST
#'
#' @param app_name Character. Your App's given name
#' @param client_id Character. Client ID
#' @param client_secret Character. Client secret
#' @export
li_auth <- function(app_name = NA, client_id = NA, client_secret = NA){
# Idea from https://github.com/mpiccirilli/Rlinkedin/blob/master/R/getProfile.R
if (is.na(app_name) & is.na(client_id) & is.na(client_secret)) {
app_name <- "LaresApp"
client_id <- "78a384k5n1otml"
client_secret <- "NDKzgFgurKt1M0Ab"
}
linkedin <- httr::oauth_endpoint(
"requestToken", "authorize", "accessToken", base_url = "https://api.linkedin.com/uas/oauth")
myapp <- httr::oauth_app(appname = app_name, client_id, client_secret)
token <- httr::oauth1.0_token(linkedin, myapp)
return(token)
}
####################################################################
#' Get My Personal LinkedIn Data
#'
#' This function brings a list with my personal Linkedin data
#'
#' @param token Object. li_auth() output
#' @export
li_profile <- function(token = NA) {
if (is.na(token)) {
token <- li_auth()
}
base_url <- "https://api.linkedin.com/v1/people/"
profile_fields <- ":(id,first-name,email-address,last-name,headline,picture-url,industry,summary,specialties,positions:(id,title,summary,start-date,end-date,is-current,company:(id,name,type,size,industry,ticker)),educations:(id,school-name,field-of-study,start-date,end-date,degree,activities,notes),associations,interests,num-recommenders,date-of-birth,publications:(id,title,publisher:(name),authors:(id,name),date,url,summary),patents:(id,title,summary,number,status:(id,name),office:(name),inventors:(id,name),date,url),languages:(id,language:(name),proficiency:(level,name)),skills:(id,skill:(name)),certifications:(id,name,authority:(name),number,start-date,end-date),courses:(id,name,number),recommendations-received:(id,recommendation-type,recommendation-text,recommender),honors-awards,three-current-positions,three-past-positions,volunteer)"
url <- paste0(base_url, "~",profile_fields,"?format=json")
get <- GET(url, config = token)
char <- rawToChar(get$content)
json <- jsonlite::fromJSON(char)
return(json)
}
t <- li_profile()
###################################################################
#' OAuth Linkedin
#'
#' This function authenticates and creates a token for LinkedIN's API REST
#'
#' @param app_name Character. Your App's given name
#' @param client_id Character. Client ID
#' @param client_secret Character. Client secret
#' @export
li_auth <- function(app_name = NA, client_id = NA, client_secret = NA){
# Idea from https://github.com/mpiccirilli/Rlinkedin/blob/master/R/getProfile.R
if (is.na(app_name) & is.na(client_id) & is.na(client_secret)) {
app_name <- "Skill map"
client_id <- "75rhz4jaw0144i"
client_secret <- "y5PmJe947pTgQzUe"
}
linkedin <- httr::oauth_endpoint(
"requestToken", "authorize", "accessToken", base_url = "https://api.linkedin.com/uas/oauth")
myapp <- httr::oauth_app(appname = app_name, client_id, client_secret)
token <- httr::oauth1.0_token(linkedin, myapp)
return(token)
}
####################################################################
#' Get My Personal LinkedIn Data
#'
#' This function brings a list with my personal Linkedin data
#'
#' @param token Object. li_auth() output
#' @export
li_profile <- function(token = NA) {
if (is.na(token)) {
token <- li_auth()
}
base_url <- "https://api.linkedin.com/v1/people/"
profile_fields <- ":(id,first-name,email-address,last-name,headline,picture-url,industry,summary,specialties,positions:(id,title,summary,start-date,end-date,is-current,company:(id,name,type,size,industry,ticker)),educations:(id,school-name,field-of-study,start-date,end-date,degree,activities,notes),associations,interests,num-recommenders,date-of-birth,publications:(id,title,publisher:(name),authors:(id,name),date,url,summary),patents:(id,title,summary,number,status:(id,name),office:(name),inventors:(id,name),date,url),languages:(id,language:(name),proficiency:(level,name)),skills:(id,skill:(name)),certifications:(id,name,authority:(name),number,start-date,end-date),courses:(id,name,number),recommendations-received:(id,recommendation-type,recommendation-text,recommender),honors-awards,three-current-positions,three-past-positions,volunteer)"
url <- paste0(base_url, "~",profile_fields,"?format=json")
get <- GET(url, config = token)
char <- rawToChar(get$content)
json <- jsonlite::fromJSON(char)
return(json)
}
t <- li_profile()
###################################################################
#' OAuth Linkedin
#'
#' This function authenticates and creates a token for LinkedIN's API REST
#'
#' @param app_name Character. Your App's given name
#' @param client_id Character. Client ID
#' @param client_secret Character. Client secret
#' @export
li_auth <- function(app_name = NA, client_id = NA, client_secret = NA){
# Idea from https://github.com/mpiccirilli/Rlinkedin/blob/master/R/getProfile.R
if (is.na(app_name) & is.na(client_id) & is.na(client_secret)) {
app_name <- "Skill map"
client_id <- "75rhz4jaw0144i"
client_secret <- "y5PmJe947pTgQzUe"
}
linkedin <- httr::oauth_endpoint(
"requestToken", "authorize", "accessToken", base_url = "https://api.linkedin.com/uas/oauth")
myapp <- httr::oauth_app(appname = app_name, client_id, client_secret)
token <- httr::oauth1.0_token(linkedin, myapp)
return(token)
}
####################################################################
#' Get My Personal LinkedIn Data
#'
#' This function brings a list with my personal Linkedin data
#'
#' @param token Object. li_auth() output
#' @export
li_profile <- function(token = NA) {
if (is.na(token)) {
token <- li_auth()
}
base_url <- "https://api.linkedin.com/v1/people/"
profile_fields <- ":(id,first-name,email-address,last-name,headline,picture-url,industry,summary,specialties,positions:(id,title,summary,start-date,end-date,is-current,company:(id,name,type,size,industry,ticker)),educations:(id,school-name,field-of-study,start-date,end-date,degree,activities,notes),associations,interests,num-recommenders,date-of-birth,publications:(id,title,publisher:(name),authors:(id,name),date,url,summary),patents:(id,title,summary,number,status:(id,name),office:(name),inventors:(id,name),date,url),languages:(id,language:(name),proficiency:(level,name)),skills:(id,skill:(name)),certifications:(id,name,authority:(name),number,start-date,end-date),courses:(id,name,number),recommendations-received:(id,recommendation-type,recommendation-text,recommender),honors-awards,three-current-positions,three-past-positions,volunteer)"
url <- paste0(base_url, "~",profile_fields,"?format=json")
get <- GET(url, config = token)
char <- rawToChar(get$content)
json <- jsonlite::fromJSON(char)
return(json)
}
t <- li_profile()
source('~/.active-rstudio-document')
###################################################################
#' OAuth Linkedin
#'
#' This function authenticates and creates a token for LinkedIN's API REST
#'
#' @param app_name Character. Your App's given name
#' @param client_id Character. Client ID
#' @param client_secret Character. Client secret
#' @export
li_auth <- function(app_name = NA, client_id = NA, client_secret = NA){
# Idea from https://github.com/mpiccirilli/Rlinkedin/blob/master/R/getProfile.R
if (is.na(app_name) & is.na(client_id) & is.na(client_secret)) {
app_name <- "LaresApp"
client_id <- "78a384k5n1otml"
client_secret <- "NDKzgFgurKt1M0Ab"
}
linkedin <- httr::oauth_endpoint(
"requestToken", "authorize", "accessToken", base_url = "https://api.linkedin.com/uas/oauth")
myapp <- httr::oauth_app(appname = app_name, client_id, client_secret)
token <- httr::oauth1.0_token(linkedin, myapp)
return(token)
}
####################################################################
#' Get My Personal LinkedIn Data
#'
#' This function brings a list with my personal Linkedin data
#'
#' @param token Object. li_auth() output
#' @export
li_profile <- function(token = NA) {
if (is.na(token)) {
token <- li_auth()
}
base_url <- "https://api.linkedin.com/v1/people/"
profile_fields <- ":(id,first-name,email-address,last-name,headline,picture-url,industry,summary,specialties,positions:(id,title,summary,start-date,end-date,is-current,company:(id,name,type,size,industry,ticker)),educations:(id,school-name,field-of-study,start-date,end-date,degree,activities,notes),associations,interests,num-recommenders,date-of-birth,publications:(id,title,publisher:(name),authors:(id,name),date,url,summary),patents:(id,title,summary,number,status:(id,name),office:(name),inventors:(id,name),date,url),languages:(id,language:(name),proficiency:(level,name)),skills:(id,skill:(name)),certifications:(id,name,authority:(name),number,start-date,end-date),courses:(id,name,number),recommendations-received:(id,recommendation-type,recommendation-text,recommender),honors-awards,three-current-positions,three-past-positions,volunteer)"
url <- paste0(base_url, "~",profile_fields,"?format=json")
get <- GET(url, config = token)
char <- rawToChar(get$content)
json <- jsonlite::fromJSON(char)
return(json)
}
t <- li_profile
t <- li_profile
library(Rlinkedin)
install_github("mpiccirilli/Rlinkedin")
library(devtools)
install_github("mpiccirilli/Rlinkedin")
# To use your own application's API and Secret Key:
in.auth <- inOAuth("Skill map", "75rhz4jaw0144i", "y5PmJe947pTgQzUe")
library(Rlinkedin)
install_github("mpiccirilli/Rlinkedin")
library(Rlinkedin)
# To use your own application's API and Secret Key:
in.auth <- inOAuth("Skill map", "75rhz4jaw0144i", "y5PmJe947pTgQzUe")
# To use your own application's API and Secret Key:
in.auth <- inOAuth("Skill map", "75rhz4jaw0144i", "y5PmJe947pTgQzUe")
in.auth <- inOAuth()
# To use your own application's API and Secret Key:
in.auth <- inOAuth("Skill map", "75rhz4jaw0144i", "y5PmJe947pTgQzUe")
# To use your own application's API and Secret Key:
in.auth <- inOAuth("Skill map", "75rhz4jaw0144i", "y5PmJe947pTgQzUe")
####################################################################
#' OAuth Linkedin
#'
#' This function authenticates and creates a token for LinkedIN's API REST
#'
#' @param app_name Character. Your App's given name
#' @param client_id Character. Client ID
#' @param client_secret Character. Client secret
#' @export
li_auth <- function(app_name = NA, client_id = NA, client_secret = NA){
# Idea from https://github.com/mpiccirilli/Rlinkedin/blob/master/R/getProfile.R
if (is.na(app_name) & is.na(client_id) & is.na(client_secret)) {
app_name <- "LaresApp"
client_id <- "78a384k5n1otml"
client_secret <- "NDKzgFgurKt1M0Ab"
}
linkedin <- httr::oauth_endpoint(
"requestToken", "authorize", "accessToken", base_url = "https://api.linkedin.com/uas/oauth")
myapp <- httr::oauth_app(appname = app_name, client_id, client_secret)
token <- httr::oauth1.0_token(linkedin, myapp)
return(token)
}
####################################################################
#' Get My Personal LinkedIn Data
#'
#' This function brings a list with my personal Linkedin data
#'
#' @param token Object. li_auth() output
#' @export
li_profile <- function(token = NA) {
if (is.na(token)) {
token <- li_auth()
}
base_url <- "https://api.linkedin.com/v1/people/"
profile_fields <- ":(id,first-name,email-address,last-name,headline,picture-url,industry,summary,specialties,positions:(id,title,summary,start-date,end-date,is-current,company:(id,name,type,size,industry,ticker)),educations:(id,school-name,field-of-study,start-date,end-date,degree,activities,notes),associations,interests,num-recommenders,date-of-birth,publications:(id,title,publisher:(name),authors:(id,name),date,url,summary),patents:(id,title,summary,number,status:(id,name),office:(name),inventors:(id,name),date,url),languages:(id,language:(name),proficiency:(level,name)),skills:(id,skill:(name)),certifications:(id,name,authority:(name),number,start-date,end-date),courses:(id,name,number),recommendations-received:(id,recommendation-type,recommendation-text,recommender),honors-awards,three-current-positions,three-past-positions,volunteer)"
url <- paste0(base_url, "~",profile_fields,"?format=json")
get <- GET(url, config = token)
char <- rawToChar(get$content)
json <- jsonlite::fromJSON(char)
return(json)
}
t - li_profile()
token <- li_auth()
t - li_profile(token)
t - li_profile()
getProfile(token)
# get crued oil prices in USD per barrel and AUD to USD rate, source is FRED  - https://fred.stlouisfed.org
# clean up dates and recalculating price to AUD
#augmented by manually added data for 2 last moths
oil <- read.csv("Oil-Brent-US.csv")
library(lubridate)
library(dplyr)
library(ggplot2)
library(ggthemes)
setwd("~/study/R misc/oil vs petrol in au")
# get crued oil prices in USD per barrel and AUD to USD rate, source is FRED  - https://fred.stlouisfed.org
# clean up dates and recalculating price to AUD
#augmented by manually added data for 2 last moths
oil <- read.csv("Oil-Brent-US.csv")
fx <- read.csv("fx-2017-2019.csv")
class(oil$DATA)
class(oil$DATE)
class(oil$DATE[1])
View(oil)
class(oil$DATE[[1])
class(oil$DATE[[1]])
fx <- fx %>% mutate(rate=1/USDtoAUD)
View(fx)
